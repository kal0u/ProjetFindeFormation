{"ast":null,"code":"var _jsxFileName = \"/home/kalou/My Tuto/ProjetFindeFormation/front/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport { validate } from \"../../utils/validators\";\nimport \"./Input.css\"; // ------- Reducer Function -------// Takes 2 argments //Always return a new state\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  }); //useReducer returned array of 2 elements, first one = current state\n\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState; //no need props and inputState above anymore\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  }; //called on every keystroke\n\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 55\n    }\n  }, props.errorText));\n};\n\nexport default Input; //The input component will manage external state, what user enter and if it is valid or not (external configuration)\n// Input component takes validate props (=array)\n//To manage differents states connected, better to use hook reducer than hook state.\n// Hook reducer allows to manage state in a component + gives function to called to update state + re-render component\n// Reducer = function which receives an action (can be dispatch) and the current state.\n// When current state is updated based on the action received, return new state +\n// reducer take new state and give it back in the component + re-render everything (=> then run more complex state updating logic)","map":{"version":3,"sources":["/home/kalou/My Tuto/ProjetFindeFormation/front/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../utils/validators\";\nimport \"./Input.css\";\n\n// ------- Reducer Function -------// Takes 2 argments //Always return a new state\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n  //useReducer returned array of 2 elements, first one = current state\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState; //no need props and inputState above anymore\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  }; //called on every keystroke\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n\n//The input component will manage external state, what user enter and if it is valid or not (external configuration)\n// Input component takes validate props (=array)\n\n//To manage differents states connected, better to use hook reducer than hook state.\n// Hook reducer allows to manage state in a component + gives function to called to update state + re-render component\n\n// Reducer = function which receives an action (can be dispatch) and the current state.\n// When current state is updated based on the action received, return new state +\n// reducer take new state and give it back in the component + re-render everything (=> then run more complex state updating logic)\n"]},"metadata":{},"sourceType":"module"}
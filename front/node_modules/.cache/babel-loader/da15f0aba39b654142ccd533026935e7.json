{"ast":null,"code":"var _jsxFileName = \"/home/kalou/My Tuto/ProjetFindeFormation/front/src/activities/pages/UpdateActivity.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\"; //useParams to get the actual activity ID which is part of the url, and store it in a constant\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElement/Card\";\nimport ErrorModal from \"../../shared/components/UIElement/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElement/LoadingSpinner\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/utils/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./ActivityForm.css\";\n\nconst UpdateActivity = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient(); //_____________\n\n  const [loadedActivity, setLoadedActivity] = useState();\n  const activityId = useParams().activityId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    date: {\n      value: \"\",\n      isValid: false\n    },\n    location: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchActivityToUpdate = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/activity/${activityId}`);\n        setLoadedActivity(responseData.activity);\n        setFormData({\n          title: {\n            value: responseData.activity.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.activity.description,\n            isValid: true\n          },\n          location: {\n            value: responseData.activity.location,\n            isValid: true\n          },\n          date: {\n            value: responseData.activity.date,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchActivityToUpdate();\n  }, [sendRequest, activityId, setFormData]);\n\n  const activityUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`http://localhost:5000/api/activity/${activityId}`, \"PATCH\", JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value,\n        location: formState.inputs.location.value,\n        date: formState.inputs.date.value\n      }), {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push(\"/\" + auth.userId + \"/activities\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!loadedActivity && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"Could not find activity\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), !isLoading && loadedActivity && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: activityUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedActivity.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (at least 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedActivity.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"location\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Location\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid location (at least 3 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedActivity.location,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"date\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Date\",\n    validators: [VALIDATOR_MINLENGTH(10)],\n    errorText: \"Please enter a valid date (format dd/mm/yyyy). Conditions de validation \\xE0 adapter\",\n    onInput: inputHandler,\n    initialValue: loadedActivity.date,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"UPDATE ACTIVITY\")));\n};\n\nexport default UpdateActivity;","map":{"version":3,"sources":["/home/kalou/My Tuto/ProjetFindeFormation/front/src/activities/pages/UpdateActivity.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","Card","ErrorModal","LoadingSpinner","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","UpdateActivity","auth","isLoading","error","sendRequest","clearError","loadedActivity","setLoadedActivity","activityId","history","formState","inputHandler","setFormData","title","value","isValid","description","date","location","fetchActivityToUpdate","responseData","activity","err","activityUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\"; //useParams to get the actual activity ID which is part of the url, and store it in a constant\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElement/Card\";\nimport ErrorModal from \"../../shared/components/UIElement/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElement/LoadingSpinner\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/utils/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport \"./ActivityForm.css\";\n\nconst UpdateActivity = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient(); //_____________\n  const [loadedActivity, setLoadedActivity] = useState();\n  const activityId = useParams().activityId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      date: {\n        value: \"\",\n        isValid: false,\n      },\n      location: {\n        value: \"\",\n        isValid: false,\n      }\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchActivityToUpdate = async () => {\n      try {\n        const responseData = await sendRequest(\n          `http://localhost:5000/api/activity/${activityId}`\n        );\n\n        setLoadedActivity(responseData.activity);\n        setFormData(\n          {\n            title: {\n              value: responseData.activity.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.activity.description,\n              isValid: true,\n            },\n            location: {\n              value: responseData.activity.location,\n              isValid: true,\n            },\n            date: {\n              value: responseData.activity.date,\n              isValid: true,\n            }\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchActivityToUpdate();\n  }, [sendRequest, activityId, setFormData]);\n\n  const activityUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `http://localhost:5000/api/activity/${activityId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n          location: formState.inputs.location.value,\n          date: formState.inputs.date.value,\n        }),\n        { \"Content-Type\": \"application/json\", Authorization: 'Bearer ' + auth.token }\n      );\n      history.push(\"/\" + auth.userId + \"/activities\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedActivity && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find activity</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedActivity && (\n        <form className=\"place-form\" onSubmit={activityUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedActivity.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (at least 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedActivity.description}\n            initialValid={true}\n          />\n          <Input\n            id=\"location\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Location\"\n            validators={[VALIDATOR_MINLENGTH(3)]}\n            errorText=\"Please enter a valid location (at least 3 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedActivity.location}\n            initialValid={true}\n          />\n          <Input\n            id=\"date\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Date\"\n            validators={[VALIDATOR_MINLENGTH(10)]}\n            errorText=\"Please enter a valid date (format dd/mm/yyyy). Conditions de validation à adapter\"\n            onInput={inputHandler}\n            initialValue={loadedActivity.date}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE ACTIVITY\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdateActivity;\n"]},"metadata":{},"sourceType":"module"}